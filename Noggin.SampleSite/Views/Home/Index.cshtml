@{
    ViewBag.Title = "Noggin Auth";
}

<section class="intro">
	<h1>Noggin Auth</h1>
    <p><strong>Noggin Auth</strong> is a simple library for doing social authentication in ASP.NET Core MVC in .NET 7.0. It authenticates that people are who they say they are, but does not authorise them and has no opinion on how you store details about your users. You're free to do that however you want and in whatever way works best for your application.</p>
	<p>The source code is available at the <a href="https://github.com/NogginBox/NogginAuth">Noggin .NetCore Git Repo</a>.</p>
	<p>For a working example download a <a href="https://github.com/NogginBox/NogginAuth/archive/master.zip">zip of the source code including the sample site</a>.
</section>

<section>
    <section class="col2">
        <h2>Unopinionated</h2>
        <ul>
            <li>Easy to add to an existing application</li>
            <li>We don't care how you store your users</li>
            <li>No dependencies on ...</li>
            <li>More power, means a little bit more work to set up, but still pretty straight forward</li>
        </ul>
    </section>
    <section class="col2">
        <h2>Lots of social login providers</h2>
        <ul>
            <li>GitHub</li>
            <li>Google</li>
            <li>Facebook</li>
            <li><del>Twitter</del></li>
            <li>3... not as many as it used to be. Working on Microsoft Account next</li>
        </ul>
    </section>
</section>

<section class="setup">
    <h2>How to set up</h2>
    <p>For an example site of NogginNetCoreAuth in action, the <a href="https://github.com/NogginBox/NogginAuth/tree/master/Noggin.SampleSite">source code for this site is available GitHub</a>.</p>
    <p>The important steps are:</p>
    <ol>
        <li><a href="#nuget">Install the nuget package</a></li>
        <li><a href="#ILoginHandler">Implement ILoginHandler</a></li>
        <li><a href="#startupcs">Add some bits to Startup.cs</a></li>
        <li><a href="#appsettings">Add provider settings to appsettings.json</a></li>
        <li><a href="#loginButton">Add a login button to your site</a></li>
    </ol>
</section>

<section class="setup" id="nuget">
    <h3>1) Install the nuget package</h3>
    <pre class="code">PM> Install-Package Noggin.NetCoreAuth</pre>
</section>

<section class="setup" id="ILoginHandler">
    <h3>2) Implement ILoginHandler</h3>
    <p>This is the step that requires most thought and the one that gives you the most power and freedom. Noggin.NetCoreAuth.Providers.ILoginHandler has two methods. One is called if the user successfully authenticates with their chosen social login provider, the other is called if they fail. We send you the information we've been able to glean about them from the provider, but you need to log them in (or not) to your site and save anything you need to.</p>
    <p>Once you're done you can return a view or redirect the user to a page of your choice.</p>
    <pre class="code">
    Task&lt;IActionResult&gt; SuccessfulLoginFrom(string provider, UserInformation user, HttpContext context);
    Task&lt;IActionResult&gt; FailedLoginFrom(string provider, AuthenticationFailInformation failInfo, HttpContext context);
</pre>
    <p>See <a class="code" href="https://github.com/NogginBox/NogginAuth/blob/master/Noggin.SampleSite/SampleLoginHandler.cs">SampleLoginHandler</a> in the sample site for an example of one. The important part is that we don't have any opinion on how to store your user, or even if you need to. We just tell you who they are.</p>
</section>

<section class="setup" id="startupcs">
    <h3>3) Add some bits to Startup.cs</h3>
    <p>You'll need the following using statement:</p>
    <pre class="code">using Noggin.NetCoreAuth.Config;</pre>

    <p>In <strong class="code">ConfigureServices(...)</strong></p>
    <ul>
        <li>Register NoggginNetCoreAuth, tell it what type your implentation of
            <span class="code">ILoginHandler</span> is and pass it an instance of
            <span class="code">IConfiguration</span> so it can get settings from
            <span class="code">appsettings.json</span>.</li>
        <li>Configure session.</li>
    </ul>
    <pre class="code">
public void ConfigureServices(IServiceCollection services)
{
    // Point NogginAuth at you Login Handler
    services.AddNogginNetCoreAuth&lt;YourFunkyLoginHandler&gt;(Configuration);

    // Configure session. Noggin Auth requires session to persists details between first and second call to login providers
    services.AddSession(options =>
    {
        options.IdleTimeout = TimeSpan.FromMinutes(25);
        options.Cookie.HttpOnly = true;
        options.Cookie.Name = ".What.ever.you.want.to.call.your.cookie";
    });
    // ...
}
</pre>

    <p>In <strong class="code">Configure(...)</strong></p>
    <ul>
        <li>Where you register your routes you'll need to register the authentication routes. These can be modified in appsettings.</li>
        <li>Enable session.</li>
    </ul>
    <pre class="code">
public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
{
    // ...

    app.UseRouting();
    app.UseSession();
    
    // Order here is important (authorization must be after authentication as it needs an authenticated user to check)
    app.UseAuthentication();
    app.UseAuthorization();

    // ...

    app.UseEndpoints(endpoints =>
    {
        endpoints.MapControllerRoute(
            name: "default",
            pattern: "{controller=Home}/{action=Index}/{id?}");

        endpoints.MapNogginNetAuthRoutes(app.ApplicationServices);
    });
}
</pre>
</section>

<section class="setup" id="appsettings">
    <h3>5) Add provider settings to appsettings.json</h3>
    <p>This is where you say which providers you want to use and to fill in your developer credentials. You need to register an API key for each provider you want to use.</p>
    <p>Add a x section to your appsettings like this:</p>
<pre class="code">
"NogginNetAuth": {
	"Providers": [
		{
			"Name": "Facebook",
			"Api": {
				"PublicKey": "...",
				"PrivateKey": "..."
			}
		},
        {
            "Name": "Github",
              "Api": {
                "PublicKey": "...",
                "PrivateKey": "..."
              }
        },
		{
			"Name": "Google",
			"Api": {
				"PublicKey": "...",
				"PrivateKey": "..."
			}
		}
	],
	"DefaultRedirectTemplate": "auth/{provider}",
	"DefaultCallbackTemplate": "auth/callback/{provider}"
}
</pre>
    <p>You will need to register an app with each provider to be able to use them to login. You can register here to get API Keys:</p>
    <ul>
        <li><a href="https://developers.facebook.com/">Facebook Developer Site</a></li>
        <li><a href="https://github.com/settings/developers">Github Developer Settings</a></li>
        <li><a href="https://console.developers.google.com/apis/credentials">Google API Credentials</a></li>
    </ul>
</section>

<section class="setup" id="logginButton">
    <h4>5) Add a login button to your site</h4>
    <p>So you can use Noggin Core Auth Tag helpers add the following to <span class="code">Views/_ViewImports.cshtml</span>.</p>
    <pre class="code">@@addTagHelper &quot;*, Noggin.NetCoreAuth&quot;</pre>
    <p>Once this is included all you need to do is add:</p>
    <pre class="code">&lt;auth-link provider=&quot;github&quot;&gt;Github&lt;/auth-link&gt;</pre>
    <p>This will render an &lt;a&gt; tag with a link to correct place to kick off authentication. You can set <span class="code">provider</span> to be any of your configured providers.</p>
</section>

<section class="setup" id="ssl">
    <h4>6) Optional - Install SSL on your server</h4>
    <p>Some providers will only work if you have SSL and if your users need to login to your site then chances are that you'd be better off with an SSL cert installed on your site. If you've not already got SSL setup then read my post on <a href="http://www.nogginbox.co.uk/blog/installing-a-free-ssl-cert-on-your-iis-net-core-mvc-website">setting up a free SSL cert on IIS</a>.</p>
</section>